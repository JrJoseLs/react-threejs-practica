/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 scene.gltf --transform 
Files: scene.gltf [109.94KB] > F:\a1 Desktop 2024\Proyectos\2024\reactjs\react-threejs\react-threejs\public\models\kindred\scene-transformed.glb [763.14KB] (-594%)
Author: Myedsu (https://sketchfab.com/myedsu)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bmw-e34-stance-style-ffe1a3a1bcb34e0bb80f1aa41c9edb46
Title: BMW E34 [stance style]
*/

import React, { useRef, useLayoutEffect } from 'react'
import { useGLTF, useAnimations, useScroll } from '@react-three/drei'
import gsap from 'gsap'
import { useFrame } from '@react-three/fiber' 


export function Scene(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./models/kindred/scene-transformed.glb')
  const { actions } = useAnimations(animations, group)
  const kindred = useRef()
  const scroll = useScroll()
  const tl = useRef()

  useFrame((state, delta) =>{
    tl.current.seek(scroll.offset * tl.current.duration())
  })

  useLayoutEffect(()=>{
    tl.current = gsap.timeline({ defaults: {duration: 2, ease: 'power1.inOut'} })

    tl.current
    .to(kindred.current.rotation, {y: -1})
    .to(kindred.current.rotation, {y: -3})
    .to(kindred.current.rotation, {y: -6.5})
  }, [])

  return (
    <group ref={group, kindred} {...props} dispose={null}>
      <mesh geometry={nodes.headlight_headlight_signal_lights_0.geometry} material={materials.headlight_signal_lights} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.headlight_headlight_0.geometry} material={materials.headlight} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.logo_bmw_logo_0.geometry} material={materials.bmw_logo} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.body_body_paint_0.geometry} material={materials.PaletteMaterial001} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.body_body_plastic_0.geometry} material={materials.PaletteMaterial002} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.body_body_focus_0.geometry} material={materials.PaletteMaterial003} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.body_win_0.geometry} material={materials.PaletteMaterial004} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.focus_int_tree_0.geometry} material={materials.tree} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.front_lights_Material001_0.geometry} material={materials['Material.001']} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.wheel_FL_bbs_tex004_0.geometry} material={materials['bbs_tex.004']} position={[0.755, 0.338, 1.387]} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes['������������������_����������������_0'].geometry} material={materials.material_47} position={[0, 0.377, -2.215]} rotation={[2.799, 0, -Math.PI]} scale={[0.26, 0.056, 0.058]} />
      <mesh geometry={nodes['������������������_number_texture_0'].geometry} material={materials.number_texture} position={[0, 0.377, -2.215]} rotation={[2.799, 0, -Math.PI]} scale={[0.26, 0.056, 0.058]} />
    </group>
  )
}

useGLTF.preload('./models/kindred/scene-transformed.glb')
